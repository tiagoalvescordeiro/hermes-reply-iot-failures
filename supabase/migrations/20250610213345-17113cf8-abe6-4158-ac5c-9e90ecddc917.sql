
-- Criar tabela de máquinas
CREATE TABLE IF NOT EXISTS maquinas (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    nome TEXT NOT NULL,
    localizacao TEXT NOT NULL,
    tipo_maquina TEXT NOT NULL DEFAULT 'industrial',
    status_operacional TEXT NOT NULL DEFAULT 'ativo' CHECK (status_operacional IN ('ativo', 'inativo', 'manutencao')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar tabela de leituras de sensores
CREATE TABLE IF NOT EXISTS leituras_sensores (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_maquina UUID NOT NULL REFERENCES maquinas(id) ON DELETE CASCADE,
    temperatura FLOAT4 NOT NULL,
    umidade FLOAT4 NOT NULL,
    vibracao_x INT4 NOT NULL,
    vibracao_y INT4 NOT NULL,
    vibracao_z INT4 NOT NULL,
    timestamp_leitura TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar tabela de alertas gerados
CREATE TABLE IF NOT EXISTS alertas (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    id_maquina UUID NOT NULL REFERENCES maquinas(id) ON DELETE CASCADE,
    tipo_alerta TEXT NOT NULL CHECK (tipo_alerta IN ('temperatura', 'vibracao', 'umidade', 'sistema')),
    severidade TEXT NOT NULL CHECK (severidade IN ('info', 'warning', 'critical')),
    titulo TEXT NOT NULL,
    descricao TEXT NOT NULL,
    valor_sensor FLOAT4,
    threshold_valor FLOAT4,
    resolvido BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    resolved_at TIMESTAMP WITH TIME ZONE
);

-- Criar tabela de configurações de limites
CREATE TABLE IF NOT EXISTS configuracoes_limites (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    id_maquina UUID NOT NULL REFERENCES maquinas(id) ON DELETE CASCADE,
    tipo_sensor TEXT NOT NULL CHECK (tipo_sensor IN ('temperatura', 'vibracao', 'umidade')),
    limite_warning FLOAT4 NOT NULL,
    limite_critical FLOAT4 NOT NULL,
    unidade TEXT NOT NULL,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(id_maquina, tipo_sensor)
);

-- Criar tabela de histórico de manutenções
CREATE TABLE IF NOT EXISTS manutencoes (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    id_maquina UUID NOT NULL REFERENCES maquinas(id) ON DELETE CASCADE,
    tipo_manutencao TEXT NOT NULL CHECK (tipo_manutencao IN ('preventiva', 'corretiva', 'preditiva')),
    descricao TEXT NOT NULL,
    tecnico_responsavel TEXT,
    data_inicio TIMESTAMP WITH TIME ZONE NOT NULL,
    data_fim TIMESTAMP WITH TIME ZONE,
    custo DECIMAL(10,2),
    status_manutencao TEXT NOT NULL DEFAULT 'agendada' CHECK (status_manutencao IN ('agendada', 'em_andamento', 'concluida', 'cancelada')),
    observacoes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar índices para melhor performance
CREATE INDEX IF NOT EXISTS idx_leituras_sensores_id_maquina ON leituras_sensores(id_maquina);
CREATE INDEX IF NOT EXISTS idx_leituras_sensores_timestamp ON leituras_sensores(timestamp_leitura DESC);
CREATE INDEX IF NOT EXISTS idx_leituras_sensores_maquina_timestamp ON leituras_sensores(id_maquina, timestamp_leitura DESC);
CREATE INDEX IF NOT EXISTS idx_alertas_maquina ON alertas(id_maquina);
CREATE INDEX IF NOT EXISTS idx_alertas_severidade ON alertas(severidade);
CREATE INDEX IF NOT EXISTS idx_alertas_resolvido ON alertas(resolvido);
CREATE INDEX IF NOT EXISTS idx_manutencoes_maquina ON manutencoes(id_maquina);
CREATE INDEX IF NOT EXISTS idx_manutencoes_status ON manutencoes(status_manutencao);

-- Habilitar RLS (Row Level Security)
ALTER TABLE maquinas ENABLE ROW LEVEL SECURITY;
ALTER TABLE leituras_sensores ENABLE ROW LEVEL SECURITY;
ALTER TABLE alertas ENABLE ROW LEVEL SECURITY;
ALTER TABLE configuracoes_limites ENABLE ROW LEVEL SECURITY;
ALTER TABLE manutencoes ENABLE ROW LEVEL SECURITY;

-- Criar políticas básicas (acesso público para desenvolvimento)
CREATE POLICY "Permitir acesso completo a máquinas" ON maquinas FOR ALL USING (true);
CREATE POLICY "Permitir acesso completo a leituras" ON leituras_sensores FOR ALL USING (true);
CREATE POLICY "Permitir acesso completo a alertas" ON alertas FOR ALL USING (true);
CREATE POLICY "Permitir acesso completo a configurações" ON configuracoes_limites FOR ALL USING (true);
CREATE POLICY "Permitir acesso completo a manutenções" ON manutencoes FOR ALL USING (true);

-- Função para atualizar timestamp de updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers para atualizar automaticamente o campo updated_at
CREATE TRIGGER update_maquinas_updated_at BEFORE UPDATE ON maquinas 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_configuracoes_updated_at BEFORE UPDATE ON configuracoes_limites 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Comentários para documentação
COMMENT ON TABLE maquinas IS 'Tabela que armazena informações das máquinas monitoradas';
COMMENT ON TABLE leituras_sensores IS 'Tabela que armazena as leituras dos sensores de cada máquina';
COMMENT ON TABLE alertas IS 'Tabela que armazena os alertas gerados pelo sistema';
COMMENT ON TABLE configuracoes_limites IS 'Tabela que armazena os limites configurados para cada sensor por máquina';
COMMENT ON TABLE manutencoes IS 'Tabela que armazena o histórico de manutenções das máquinas';
COMMENT ON COLUMN leituras_sensores.vibracao_x IS 'Valor do ADC para vibração no eixo X (0-4095)';
COMMENT ON COLUMN leituras_sensores.vibracao_y IS 'Valor do ADC para vibração no eixo Y (0-4095)';
COMMENT ON COLUMN leituras_sensores.vibracao_z IS 'Valor do ADC para vibração no eixo Z (0-4095)';
